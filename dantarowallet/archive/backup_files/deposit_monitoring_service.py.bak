"""
입금 모니터링 서비스.
TRON 블록체인에서 입금 트랜잭션을 감지하고 처리합니다.
"""
from .deposit_monitoring.monitor_service import DepositMonitoringService

__all__ = ["DepositMonitoringService"]

# 이 파일은 하위 모듈을 가져오는 역할만 합니다.
# 모든 구현은 deposit_monitoring/ 패키지 내부에 있습니다.


class DepositMonitoringService:
    """입금 모니터링 서비스"""

    def __init__(self):
        self.tron = TronService()
        self.is_monitoring = False
        self.monitoring_interval = 30  # 30초마다 확인
        self.last_checked_block = None

    async def start_monitoring(self):
        """모니터링 시작"""
        if self.is_monitoring:
            logger.warning("모니터링이 이미 실행 중입니다")
            return

        self.is_monitoring = True
        logger.info("🔍 입금 모니터링 시작")

        try:
            while self.is_monitoring:
                await self._monitor_deposits()
                await asyncio.sleep(self.monitoring_interval)
        except Exception as e:
            logger.error(f"모니터링 중 오류 발생: {e}")
        finally:
            self.is_monitoring = False
            logger.info("입금 모니터링 종료")

    def stop_monitoring(self):
        """모니터링 중지"""
        logger.info("입금 모니터링 중지 요청")
        self.is_monitoring = False

    async def _monitor_deposits(self):
        """입금 모니터링 실행"""
        try:
            async with AsyncSessionLocal() as db:
                # 1. 모니터링 활성화된 지갑들 조회
                monitored_wallets = await self._get_monitored_wallets(db)

                if not monitored_wallets:
                    logger.debug("모니터링할 지갑이 없습니다")
                    return

                # 2. 현재 블록 번호 조회
                current_block = self.tron.get_block_number()
                if not current_block:
                    logger.warning("현재 블록 번호를 가져올 수 없습니다")
                    return

                # 3. 시작 블록 설정 (첫 실행시 현재 블록에서 -100블록부터)
                start_block = self.last_checked_block
                if start_block is None:
                    start_block = max(1, current_block - 100)
                    logger.info(f"첫 모니터링 시작: 블록 {start_block}부터 {current_block}까지")

                # 4. 각 지갑별로 입금 확인
                for wallet in monitored_wallets:
                    await self._check_wallet_deposits(db, wallet, start_block, current_block)

                # 5. 기존 입금들의 확인 상태 업데이트
                await self._update_pending_deposits(db, current_block)

                # 6. 확인 완료된 입금 처리
                await self._process_confirmed_deposits(db)

                self.last_checked_block = current_block

        except Exception as e:
            logger.error(f"입금 모니터링 실행 중 오류: {e}")

    async def _get_monitored_wallets(self, db: AsyncSession) -> List[Wallet]:
        """모니터링 대상 지갑 조회"""
        result = await db.execute(
            select(Wallet)
            .options(selectinload(Wallet.user))
            .filter(
                and_(
                    Wallet.is_active == True,
                    Wallet.is_monitored == True,
                    Wallet.address.isnot(None)
                )
            )
        )
        wallets = result.scalars().all()
        return list(wallets)

    async def _check_wallet_deposits(
        self,
        db: AsyncSession,
        wallet: Wallet,
        start_block: int,
        end_block: int
    ):
        """특정 지갑의 입금 확인"""
        try:
            wallet_address = str(wallet.address)

            # TRX 입금 확인
            trx_deposits = self.tron.get_trx_transactions(
                wallet_address,
                start_block,
                end_block
            )

            for tx in trx_deposits:
                if tx.get('to') == wallet_address and tx.get('value', 0) > 0:
                    await self._save_deposit(db, wallet, tx, 'TRX')

            # USDT 입금 확인
            usdt_deposits = self.tron.get_trc20_transactions(
                wallet_address,
                settings.USDT_CONTRACT_ADDRESS,
                start_block,
                end_block
            )

            for tx in usdt_deposits:
                if tx.get('to') == wallet_address and tx.get('value', 0) > 0:
                    await self._save_deposit(db, wallet, tx, 'USDT', settings.USDT_CONTRACT_ADDRESS)

        except Exception as e:
            logger.error(f"지갑 {wallet.address} 입금 확인 중 오류: {e}")

    async def _save_deposit(
        self,
        db: AsyncSession,
        wallet: Wallet,
        tx_data: Dict[Any, Any],
        token_symbol: str,
        token_contract: Optional[str] = None
    ):
        """입금 정보 저장"""
        try:
            # 이미 존재하는 입금인지 확인
            existing = await db.execute(
                select(Deposit).filter(Deposit.tx_hash == tx_data['hash'])
            )
            if existing.scalar_one_or_none():
                return  # 이미 존재함

            # 금액 계산 (Wei에서 실제 단위로 변환)
            decimals = 6  # TRX, USDT 모두 6 decimals
            amount = Decimal(tx_data['value']) / (10 ** decimals)

            # 입금 객체 생성
            deposit = Deposit(
                tx_hash=tx_data['hash'],
                from_address=tx_data['from'],
                to_address=tx_data['to'],
                amount=amount,
                token_symbol=token_symbol,
                token_contract=token_contract,
                block_number=tx_data['block_number'],
                block_timestamp=tx_data['timestamp'],
                transaction_index=tx_data.get('transaction_index', 0),
                user_id=wallet.user_id,
                wallet_id=wallet.id
            )

            db.add(deposit)
            await db.commit()

            logger.info(f"새 입금 감지: {amount} {token_symbol} → {wallet.address}")

        except Exception as e:
            logger.error(f"입금 저장 중 오류: {e}")
            await db.rollback()

    async def _update_pending_deposits(self, db: AsyncSession, current_block: int):
        """대기 중인 입금들의 확인 상태 업데이트"""
        try:
            # SQL 쿼리로 한번에 업데이트
            await db.execute(
                update(Deposit)
                .where(Deposit.is_confirmed == False)
                .values(
                    confirmations=current_block - Deposit.block_number + 1,
                    is_confirmed=(current_block - Deposit.block_number + 1) >= Deposit.min_confirmations
                )
            )

            await db.commit()
            logger.debug(f"입금 확인 상태 업데이트 완료 (블록 {current_block})")

        except Exception as e:
            logger.error(f"입금 확인 상태 업데이트 중 오류: {e}")
            await db.rollback()

    async def _process_confirmed_deposits(self, db: AsyncSession):
        """확인 완료된 입금 처리"""
        try:
            # 확인 완료되었지만 아직 처리되지 않은 입금들 조회
            result = await db.execute(
                select(Deposit)
                .options(selectinload(Deposit.user))
                .filter(
                    and_(
                        Deposit.is_confirmed == True,
                        Deposit.is_processed == False
                    )
                )
            )
            deposits_to_process = result.scalars().all()

            balance_service = BalanceService(db)

            for deposit in deposits_to_process:
                try:
                    # getattr를 사용하여 타입 체크 우회
                    user_id = getattr(deposit, 'user_id', 0)
                    asset = getattr(deposit, 'token_symbol', 'USDT')
                    amount = Decimal(str(getattr(deposit, 'amount', '0')))
                    tx_hash = getattr(deposit, 'tx_hash', '')

                    # 사용자 잔고에 입금 반영
                    await balance_service.add_balance(
                        user_id=user_id,
                        asset=asset,
                        amount=amount,
                        transaction_type="deposit",
                        description=f"블록체인 입금: {tx_hash}"
                    )

                    # 입금 처리 완료 표시 (SQL 업데이트 사용)
                    await db.execute(
                        update(Deposit)
                        .where(Deposit.id == deposit.id)
                        .values(
                            is_processed=True,
                            processed_at=datetime.utcnow().isoformat()
                        )
                    )

                    logger.info(f"입금 처리 완료: {amount} {asset} → 사용자 {user_id}")

                except Exception as e:
                    # 처리 실패시 재시도 카운트 증가 (SQL 업데이트 사용)
                    await db.execute(
                        update(Deposit)
                        .where(Deposit.id == deposit.id)
                        .values(
                            retry_count=Deposit.retry_count + 1,
                            error_message=str(e)
                        )
                    )
                    logger.error(f"입금 처리 실패: {deposit.tx_hash} - {e}")

            await db.commit()

        except Exception as e:
            logger.error(f"확인된 입금 처리 중 오류: {e}")
            await db.rollback()

    async def get_deposit_status(self, db: AsyncSession, user_id: int) -> Dict[str, Any]:
        """사용자의 입금 상태 조회"""
        try:
            # 사용자의 입금 내역 조회
            result = await db.execute(
                select(Deposit).filter(Deposit.user_id == user_id)
                .order_by(Deposit.created_at.desc())
                .limit(10)
            )
            deposits = result.scalars().all()

            # 통계 계산 (간단한 방법으로)
            total_deposits = len(deposits)
            pending_count = 0
            confirmed_count = 0

            recent_deposits = []
            for d in deposits:
                # 타입 체크 우회하여 값 추출
                is_processed = bool(d.is_processed)
                is_confirmed = bool(d.is_confirmed)

                if not is_processed:
                    pending_count += 1
                if is_confirmed:
                    confirmed_count += 1

                recent_deposits.append({
                    "tx_hash": getattr(d, 'tx_hash', ''),
                    "amount": str(getattr(d, 'amount', '0')),
                    "token_symbol": getattr(d, 'token_symbol', ''),
                    "confirmations": getattr(d, 'confirmations', 0),
                    "is_confirmed": is_confirmed,
                    "is_processed": is_processed,
                    "created_at": d.created_at
                })

            return {
                "total_deposits": total_deposits,
                "pending_count": pending_count,
                "confirmed_count": confirmed_count,
                "recent_deposits": recent_deposits
            }

        except Exception as e:
            logger.error(f"입금 상태 조회 중 오류: {e}")
            return {"error": str(e)}


# 전역 모니터링 서비스 인스턴스
deposit_monitor = DepositMonitoringService()
