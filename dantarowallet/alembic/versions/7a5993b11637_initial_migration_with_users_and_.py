"""Initial migration with users and balances

Revision ID: 7a5993b11637
Revises:
Create Date: 2025-07-03 00:26:10.245940

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "7a5993b11637"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("tron_address", sa.String(length=42), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_user_email_active", "users", ["email", "is_active"], unique=False
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(
        op.f("ix_users_tron_address"), "users", ["tron_address"], unique=True
    )
    op.create_table(
        "balances",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("asset", sa.String(length=10), nullable=False),
        sa.Column("amount", sa.Numeric(precision=18, scale=6), nullable=False),
        sa.Column("locked_amount", sa.Numeric(precision=18, scale=6), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint("amount >= 0", name="check_positive_amount"),
        sa.CheckConstraint(
            "locked_amount <= amount", name="check_locked_not_exceed_amount"
        ),
        sa.CheckConstraint("locked_amount >= 0", name="check_positive_locked"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "asset", name="uq_user_asset"),
    )
    op.create_index(
        "idx_balance_user_asset", "balances", ["user_id", "asset"], unique=False
    )
    op.create_index(op.f("ix_balances_id"), "balances", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_balances_id"), table_name="balances")
    op.drop_index("idx_balance_user_asset", table_name="balances")
    op.drop_table("balances")
    op.drop_index(op.f("ix_users_tron_address"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index("idx_user_email_active", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
