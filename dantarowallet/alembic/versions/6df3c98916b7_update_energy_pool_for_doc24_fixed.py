"""update_energy_pool_for_doc24_fixed

Revision ID: 6df3c98916b7
Revises: 2b6ff5b2e63f
Create Date: 2025-07-07 22:12:19.784385

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6df3c98916b7'
down_revision: Union[str, None] = '2b6ff5b2e63f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('energy_usage_history',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('partner_id', sa.String(length=36), nullable=False),
    sa.Column('transaction_type', sa.String(length=50), nullable=False),
    sa.Column('energy_amount', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('system_transaction_alerts',
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('alert_type', sa.String(length=50), nullable=False),
    sa.Column('level', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_resolved', sa.Boolean(), nullable=False),
    sa.Column('resolved_by', sa.Integer(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('alert_data', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_system_alert_active', 'system_transaction_alerts', ['is_active', 'created_at'], unique=False)
    op.create_index('idx_system_alert_level', 'system_transaction_alerts', ['level', 'is_resolved'], unique=False)
    op.create_index(op.f('ix_system_transaction_alerts_alert_type'), 'system_transaction_alerts', ['alert_type'], unique=False)
    op.create_index(op.f('ix_system_transaction_alerts_id'), 'system_transaction_alerts', ['id'], unique=False)
    op.create_index(op.f('ix_system_transaction_alerts_is_active'), 'system_transaction_alerts', ['is_active'], unique=False)
    op.create_index(op.f('ix_system_transaction_alerts_is_resolved'), 'system_transaction_alerts', ['is_resolved'], unique=False)
    op.create_index(op.f('ix_system_transaction_alerts_level'), 'system_transaction_alerts', ['level'], unique=False)
    op.drop_index('idx_system_alert_active', table_name='systemalerts')
    op.drop_index('idx_system_alert_level', table_name='systemalerts')
    op.drop_index('ix_systemalerts_alert_type', table_name='systemalerts')
    op.drop_index('ix_systemalerts_id', table_name='systemalerts')
    op.drop_index('ix_systemalerts_is_active', table_name='systemalerts')
    op.drop_index('ix_systemalerts_is_resolved', table_name='systemalerts')
    op.drop_index('ix_systemalerts_level', table_name='systemalerts')
    op.drop_table('systemalerts')
    op.alter_column('deposits', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text('("pending")'))
    op.add_column('energy_pools', sa.Column('owner_address', sa.String(length=34), nullable=False))
    op.add_column('energy_pools', sa.Column('frozen_trx', sa.Numeric(precision=20, scale=6), nullable=True))
    op.add_column('energy_pools', sa.Column('total_energy', sa.Integer(), nullable=True))
    op.add_column('energy_pools', sa.Column('used_energy', sa.Integer(), nullable=True))
    op.add_column('energy_pools', sa.Column('status', sa.Enum('ACTIVE', 'LOW', 'CRITICAL', 'DEPLETED', 'MAINTENANCE', name='energypoolstatus'), nullable=True))
    op.add_column('energy_pools', sa.Column('low_threshold', sa.Integer(), nullable=True))
    op.add_column('energy_pools', sa.Column('critical_threshold', sa.Integer(), nullable=True))
    op.add_column('energy_pools', sa.Column('auto_refill', sa.Boolean(), nullable=True))
    op.add_column('energy_pools', sa.Column('auto_refill_amount', sa.Numeric(precision=20, scale=6), nullable=True))
    op.add_column('energy_pools', sa.Column('auto_refill_trigger', sa.Integer(), nullable=True))
    op.add_column('energy_pools', sa.Column('daily_consumption', sa.JSON(), nullable=True))
    op.add_column('energy_pools', sa.Column('peak_usage_hours', sa.JSON(), nullable=True))
    op.add_column('energy_pools', sa.Column('last_refilled_at', sa.DateTime(), nullable=True))
    op.add_column('energy_pools', sa.Column('last_checked_at', sa.DateTime(), nullable=True))
    op.alter_column('energy_pools', 'available_energy',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=True)
    op.alter_column('energy_pools', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_column('energy_pools', 'wallet_address')
    op.drop_column('energy_pools', 'daily_energy_consumption')
    op.drop_column('energy_pools', 'frozen_for_energy')
    op.drop_column('energy_pools', 'bandwidth_threshold')
    op.drop_column('energy_pools', 'notes')
    op.drop_column('energy_pools', 'total_frozen_trx')
    op.drop_column('energy_pools', 'frozen_for_bandwidth')
    op.drop_column('energy_pools', 'last_freeze_cost')
    op.drop_column('energy_pools', 'updated_at')
    op.drop_column('energy_pools', 'auto_refreeze_enabled')
    op.drop_column('energy_pools', 'is_active')
    op.drop_column('energy_pools', 'last_updated')
    op.drop_column('energy_pools', 'energy_threshold')
    op.drop_column('energy_pools', 'total_freeze_cost')
    op.drop_column('energy_pools', 'daily_bandwidth_consumption')
    op.drop_column('energy_pools', 'available_bandwidth')
    op.add_column('energy_price_history', sa.Column('pool_id', sa.Integer(), nullable=True))
    op.add_column('energy_price_history', sa.Column('energy_price_trx', sa.Numeric(precision=20, scale=8), nullable=True))
    op.add_column('energy_price_history', sa.Column('energy_price_usd', sa.Numeric(precision=20, scale=8), nullable=True))
    op.add_column('energy_price_history', sa.Column('market_demand', sa.String(length=20), nullable=True))
    op.add_column('energy_price_history', sa.Column('network_congestion', sa.Integer(), nullable=True))
    op.alter_column('energy_price_history', 'trx_price_usd',
               existing_type=sa.NUMERIC(precision=18, scale=8),
               type_=sa.Numeric(precision=20, scale=8),
               nullable=True)
    op.alter_column('energy_price_history', 'recorded_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_index('ix_energy_price_history_id', table_name='energy_price_history')
    op.create_foreign_key(None, 'energy_price_history', 'energy_pools', ['pool_id'], ['id'])
    op.drop_column('energy_price_history', 'energy_per_trx')
    op.drop_column('energy_price_history', 'source')
    op.drop_column('energy_price_history', 'total_frozen_trx')
    op.drop_column('energy_price_history', 'usdt_transfer_cost')
    op.drop_column('energy_price_history', 'trx_transfer_cost')
    op.drop_column('energy_price_history', 'energy_utilization')
    op.drop_column('energy_price_history', 'bandwidth_per_trx')
    op.drop_column('energy_price_history', 'created_at')
    op.add_column('energy_usage_logs', sa.Column('pool_id', sa.Integer(), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('transaction_id', sa.Integer(), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('energy_price', sa.Numeric(precision=20, scale=8), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('actual_cost', sa.Numeric(precision=20, scale=6), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('used_at', sa.DateTime(), nullable=True))
    op.alter_column('energy_usage_logs', 'energy_consumed',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('energy_usage_logs', 'transaction_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_index('ix_energy_usage_logs_id', table_name='energy_usage_logs')
    op.create_foreign_key(None, 'energy_usage_logs', 'energy_pools', ['pool_id'], ['id'])
    op.create_foreign_key(None, 'energy_usage_logs', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'energy_usage_logs', 'transactions', ['transaction_id'], ['id'])
    op.drop_column('energy_usage_logs', 'to_address')
    op.drop_column('energy_usage_logs', 'transaction_hash')
    op.drop_column('energy_usage_logs', 'created_at')
    op.drop_column('energy_usage_logs', 'notes')
    op.drop_column('energy_usage_logs', 'block_number')
    op.drop_column('energy_usage_logs', 'timestamp')
    op.drop_column('energy_usage_logs', 'amount')
    op.drop_column('energy_usage_logs', 'asset')
    op.drop_column('energy_usage_logs', 'bandwidth_consumed')
    op.drop_column('energy_usage_logs', 'energy_pool_id')
    op.drop_column('energy_usage_logs', 'trx_cost_equivalent')
    op.drop_column('energy_usage_logs', 'from_address')
    op.alter_column('partners', 'id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False)
    op.create_index(op.f('ix_partners_id'), 'partners', ['id'], unique=False)
    op.create_unique_constraint(None, 'partners', ['contact_email'])
    op.create_unique_constraint(None, 'partners', ['domain'])
    op.create_unique_constraint(None, 'partners', ['api_key'])
    op.create_unique_constraint(None, 'partners', ['name'])
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_column('transactions', 'related_user_id')
    op.alter_column('withdrawals', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PENDING', 'REVIEWING', 'APPROVED', 'PROCESSING', 'COMPLETED', 'REJECTED', 'FAILED', 'CANCELLED', name='withdrawalstatus'),
               existing_nullable=False)
    op.alter_column('withdrawals', 'priority',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='withdrawalpriority'),
               existing_nullable=False)
    op.drop_index('idx_withdrawal_requested_at', table_name='withdrawals')
    op.drop_index('idx_withdrawal_status_priority', table_name='withdrawals')
    op.drop_index('idx_withdrawal_user_status', table_name='withdrawals')
    op.drop_index('ix_withdrawals_tx_hash', table_name='withdrawals')
    op.drop_column('withdrawals', 'error_message')
    op.drop_column('withdrawals', 'notes')
    op.drop_column('withdrawals', 'user_agent')
    op.drop_column('withdrawals', 'rejection_reason')
    op.drop_column('withdrawals', 'admin_notes')
    op.drop_column('withdrawals', 'tx_fee')
    op.drop_column('withdrawals', 'tx_hash')
    op.drop_column('withdrawals', 'ip_address')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('withdrawals', sa.Column('ip_address', sa.VARCHAR(length=45), nullable=True))
    op.add_column('withdrawals', sa.Column('tx_hash', sa.VARCHAR(length=100), nullable=True))
    op.add_column('withdrawals', sa.Column('tx_fee', sa.NUMERIC(precision=28, scale=8), nullable=True))
    op.add_column('withdrawals', sa.Column('admin_notes', sa.TEXT(), nullable=True))
    op.add_column('withdrawals', sa.Column('rejection_reason', sa.TEXT(), nullable=True))
    op.add_column('withdrawals', sa.Column('user_agent', sa.VARCHAR(length=200), nullable=True))
    op.add_column('withdrawals', sa.Column('notes', sa.TEXT(), nullable=True))
    op.add_column('withdrawals', sa.Column('error_message', sa.TEXT(), nullable=True))
    op.create_index('ix_withdrawals_tx_hash', 'withdrawals', ['tx_hash'], unique=1)
    op.create_index('idx_withdrawal_user_status', 'withdrawals', ['user_id', 'status'], unique=False)
    op.create_index('idx_withdrawal_status_priority', 'withdrawals', ['status', 'priority'], unique=False)
    op.create_index('idx_withdrawal_requested_at', 'withdrawals', ['requested_at'], unique=False)
    op.alter_column('withdrawals', 'priority',
               existing_type=sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='withdrawalpriority'),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.alter_column('withdrawals', 'status',
               existing_type=sa.Enum('PENDING', 'REVIEWING', 'APPROVED', 'PROCESSING', 'COMPLETED', 'REJECTED', 'FAILED', 'CANCELLED', name='withdrawalstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.add_column('transactions', sa.Column('related_user_id', sa.INTEGER(), nullable=True))
    op.create_foreign_key(None, 'transactions', 'users', ['related_user_id'], ['id'])
    op.drop_constraint(None, 'partners', type_='unique')
    op.drop_constraint(None, 'partners', type_='unique')
    op.drop_constraint(None, 'partners', type_='unique')
    op.drop_constraint(None, 'partners', type_='unique')
    op.drop_index(op.f('ix_partners_id'), table_name='partners')
    op.alter_column('partners', 'id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True)
    op.add_column('energy_usage_logs', sa.Column('from_address', sa.VARCHAR(length=50), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('trx_cost_equivalent', sa.NUMERIC(precision=18, scale=6), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('energy_pool_id', sa.INTEGER(), nullable=False))
    op.add_column('energy_usage_logs', sa.Column('bandwidth_consumed', sa.BIGINT(), nullable=False))
    op.add_column('energy_usage_logs', sa.Column('asset', sa.VARCHAR(length=20), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('amount', sa.NUMERIC(precision=18, scale=6), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('timestamp', sa.DATETIME(), nullable=False))
    op.add_column('energy_usage_logs', sa.Column('block_number', sa.BIGINT(), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('notes', sa.TEXT(), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('energy_usage_logs', sa.Column('transaction_hash', sa.VARCHAR(length=64), nullable=True))
    op.add_column('energy_usage_logs', sa.Column('to_address', sa.VARCHAR(length=50), nullable=True))
    op.drop_constraint(None, 'energy_usage_logs', type_='foreignkey')
    op.drop_constraint(None, 'energy_usage_logs', type_='foreignkey')
    op.drop_constraint(None, 'energy_usage_logs', type_='foreignkey')
    op.create_index('ix_energy_usage_logs_id', 'energy_usage_logs', ['id'], unique=False)
    op.alter_column('energy_usage_logs', 'transaction_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('energy_usage_logs', 'energy_consumed',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.drop_column('energy_usage_logs', 'used_at')
    op.drop_column('energy_usage_logs', 'actual_cost')
    op.drop_column('energy_usage_logs', 'energy_price')
    op.drop_column('energy_usage_logs', 'transaction_id')
    op.drop_column('energy_usage_logs', 'pool_id')
    op.add_column('energy_price_history', sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('energy_price_history', sa.Column('bandwidth_per_trx', sa.BIGINT(), nullable=False))
    op.add_column('energy_price_history', sa.Column('energy_utilization', sa.NUMERIC(precision=5, scale=2), nullable=True))
    op.add_column('energy_price_history', sa.Column('trx_transfer_cost', sa.NUMERIC(precision=18, scale=6), nullable=True))
    op.add_column('energy_price_history', sa.Column('usdt_transfer_cost', sa.NUMERIC(precision=18, scale=6), nullable=True))
    op.add_column('energy_price_history', sa.Column('total_frozen_trx', sa.NUMERIC(precision=18, scale=6), nullable=True))
    op.add_column('energy_price_history', sa.Column('source', sa.VARCHAR(length=50), nullable=True))
    op.add_column('energy_price_history', sa.Column('energy_per_trx', sa.BIGINT(), nullable=False))
    op.drop_constraint(None, 'energy_price_history', type_='foreignkey')
    op.create_index('ix_energy_price_history_id', 'energy_price_history', ['id'], unique=False)
    op.alter_column('energy_price_history', 'recorded_at',
               existing_type=sa.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('energy_price_history', 'trx_price_usd',
               existing_type=sa.Numeric(precision=20, scale=8),
               type_=sa.NUMERIC(precision=18, scale=8),
               nullable=False)
    op.drop_column('energy_price_history', 'network_congestion')
    op.drop_column('energy_price_history', 'market_demand')
    op.drop_column('energy_price_history', 'energy_price_usd')
    op.drop_column('energy_price_history', 'energy_price_trx')
    op.drop_column('energy_price_history', 'pool_id')
    op.add_column('energy_pools', sa.Column('available_bandwidth', sa.BIGINT(), nullable=False))
    op.add_column('energy_pools', sa.Column('daily_bandwidth_consumption', sa.BIGINT(), nullable=False))
    op.add_column('energy_pools', sa.Column('total_freeze_cost', sa.NUMERIC(precision=18, scale=6), nullable=False))
    op.add_column('energy_pools', sa.Column('energy_threshold', sa.BIGINT(), nullable=False))
    op.add_column('energy_pools', sa.Column('last_updated', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
    op.add_column('energy_pools', sa.Column('is_active', sa.BOOLEAN(), nullable=True))
    op.add_column('energy_pools', sa.Column('auto_refreeze_enabled', sa.BOOLEAN(), nullable=True))
    op.add_column('energy_pools', sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('energy_pools', sa.Column('last_freeze_cost', sa.NUMERIC(precision=18, scale=6), nullable=True))
    op.add_column('energy_pools', sa.Column('frozen_for_bandwidth', sa.NUMERIC(precision=18, scale=6), nullable=False))
    op.add_column('energy_pools', sa.Column('total_frozen_trx', sa.NUMERIC(precision=18, scale=6), nullable=False))
    op.add_column('energy_pools', sa.Column('notes', sa.TEXT(), nullable=True))
    op.add_column('energy_pools', sa.Column('bandwidth_threshold', sa.BIGINT(), nullable=False))
    op.add_column('energy_pools', sa.Column('frozen_for_energy', sa.NUMERIC(precision=18, scale=6), nullable=False))
    op.add_column('energy_pools', sa.Column('daily_energy_consumption', sa.BIGINT(), nullable=False))
    op.add_column('energy_pools', sa.Column('wallet_address', sa.VARCHAR(length=50), nullable=False))
    op.alter_column('energy_pools', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('energy_pools', 'available_energy',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=False)
    op.drop_column('energy_pools', 'last_checked_at')
    op.drop_column('energy_pools', 'last_refilled_at')
    op.drop_column('energy_pools', 'peak_usage_hours')
    op.drop_column('energy_pools', 'daily_consumption')
    op.drop_column('energy_pools', 'auto_refill_trigger')
    op.drop_column('energy_pools', 'auto_refill_amount')
    op.drop_column('energy_pools', 'auto_refill')
    op.drop_column('energy_pools', 'critical_threshold')
    op.drop_column('energy_pools', 'low_threshold')
    op.drop_column('energy_pools', 'status')
    op.drop_column('energy_pools', 'used_energy')
    op.drop_column('energy_pools', 'total_energy')
    op.drop_column('energy_pools', 'frozen_trx')
    op.drop_column('energy_pools', 'owner_address')
    op.alter_column('deposits', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text('("pending")'))
    op.create_table('systemalerts',
    sa.Column('title', sa.VARCHAR(length=200), nullable=False),
    sa.Column('message', sa.TEXT(), nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('level', sa.VARCHAR(length=20), nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), nullable=False),
    sa.Column('is_resolved', sa.BOOLEAN(), nullable=False),
    sa.Column('resolved_by', sa.INTEGER(), nullable=True),
    sa.Column('resolved_at', sa.DATETIME(), nullable=True),
    sa.Column('alert_data', sa.TEXT(), nullable=True),
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_systemalerts_level', 'systemalerts', ['level'], unique=False)
    op.create_index('ix_systemalerts_is_resolved', 'systemalerts', ['is_resolved'], unique=False)
    op.create_index('ix_systemalerts_is_active', 'systemalerts', ['is_active'], unique=False)
    op.create_index('ix_systemalerts_id', 'systemalerts', ['id'], unique=False)
    op.create_index('ix_systemalerts_alert_type', 'systemalerts', ['alert_type'], unique=False)
    op.create_index('idx_system_alert_level', 'systemalerts', ['level', 'is_resolved'], unique=False)
    op.create_index('idx_system_alert_active', 'systemalerts', ['is_active', 'created_at'], unique=False)
    op.drop_index(op.f('ix_system_transaction_alerts_level'), table_name='system_transaction_alerts')
    op.drop_index(op.f('ix_system_transaction_alerts_is_resolved'), table_name='system_transaction_alerts')
    op.drop_index(op.f('ix_system_transaction_alerts_is_active'), table_name='system_transaction_alerts')
    op.drop_index(op.f('ix_system_transaction_alerts_id'), table_name='system_transaction_alerts')
    op.drop_index(op.f('ix_system_transaction_alerts_alert_type'), table_name='system_transaction_alerts')
    op.drop_index('idx_system_alert_level', table_name='system_transaction_alerts')
    op.drop_index('idx_system_alert_active', table_name='system_transaction_alerts')
    op.drop_table('system_transaction_alerts')
    op.drop_table('energy_usage_history')
    # ### end Alembic commands ###
