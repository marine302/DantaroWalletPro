'use client';

import { useState, useEffect, useRef } from 'react';
import { BasePage } from "@/components/ui/BasePage";
import { Section, StatCard, Button } from '@/components/ui/DarkThemeComponents';
import { RefreshCw, TrendingUp, TrendingDown, Zap, AlertCircle, CheckCircle } from 'lucide-react';
import { tronNRGService, TronNRGProvider, TronNRGMarketData, TronNRGPrice } from '@/services/tron-nrg-service';
import { energyTronService, EnergyTronProvider, EnergyTronMarketData, ProviderComparison } from '@/services/energytron-service';

interface CombinedProvider {
  id: string;
  name: string;
  provider: 'TronNRG' | 'EnergyTron';
  status: 'online' | 'offline' | 'maintenance';
  pricePerEnergy: number;
  availableEnergy: number;
  reliability: number;
  avgResponseTime: number;
  minOrderSize: number;
  maxOrderSize: number;
  fees: {
    tradingFee: number;
    withdrawalFee: number;
  };
  lastUpdated: string;
  priceChangeStatus?: 'up' | 'down' | 'stable';
}

interface MarketSummary {
  bestPrice: number;
  bestProvider: string;
  totalProviders: number;
  activeProviders: number;
  avgPrice: number;
  priceChange24h: number;
  totalVolume: number;
  lastUpdated: string;
}

export default function ExternalEnergyMarketPage() {
  const [combinedProviders, setCombinedProviders] = useState<CombinedProvider[]>([]);
  const [marketSummary, setMarketSummary] = useState<MarketSummary | null>(null);
  const [providerComparison, setProviderComparison] = useState<ProviderComparison | null>(null);
  const [tronNRGPrice, setTronNRGPrice] = useState<TronNRGPrice | null>(null);
  const [energyTronData, setEnergyTronData] = useState<EnergyTronMarketData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('connecting');
  const [sortBy, setSortBy] = useState('price');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterProvider, setFilterProvider] = useState('all'); // Ï∂îÍ∞Ä: Í≥µÍ∏âÏûêÎ≥Ñ ÌïÑÌÑ∞
  const [lastUpdate, setLastUpdate] = useState<string>('');
  
  const tronWSRef = useRef<WebSocket | null>(null);
  const energyTronWSRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    loadInitialData();
    
    // Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏ Ïó∞Í≤∞
    connectPriceStreams();

    // Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Í≥µÍ∏âÏûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ (30Ï¥àÎßàÎã§)
    const providerInterval = setInterval(loadAllProviders, 30000);

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
    return () => {
      if (tronWSRef.current) {
        tronWSRef.current.close();
      }
      if (energyTronWSRef.current) {
        energyTronWSRef.current.close();
      }
      clearInterval(providerInterval);
    };
  }, []);

  const loadInitialData = async () => {
    try {
      setIsLoading(true);
      setConnectionStatus('connecting');
      
      console.log('üîÑ Loading initial external energy market data...');
      
      // Î≥ëÎ†¨Î°ú Îëê Í≥µÍ∏âÏûêÏùò Îç∞Ïù¥ÌÑ∞ Î°úÎìú (timeout Ï∂îÍ∞Ä)
      const dataPromises = [
        Promise.race([
          tronNRGService.getMarketData(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
        ]),
        Promise.race([
          tronNRGService.getProviders(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
        ]),
        Promise.race([
          tronNRGService.getCurrentPrice(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
        ]),
        Promise.race([
          energyTronService.getMarketData(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
        ]),
        Promise.race([
          energyTronService.getProviders(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
        ]),
        Promise.race([
          energyTronService.compareProviders(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
        ])
      ];

      const [
        tronNRGMarketData,
        tronNRGProviders,
        tronNRGPrice,
        energyTronMarketData,
        energyTronProviders,
        comparison
      ] = await Promise.allSettled(dataPromises);

      // Í≤∞Í≥º Ï≤òÎ¶¨ (Ïã§Ìå®Ìïú ÏöîÏ≤≠ÏùÄ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©)
      const tronMarketData = tronNRGMarketData.status === 'fulfilled' ? tronNRGMarketData.value : {
        currentPrice: 0.0041,
        dailyVolume: 0,
        dailyChange: 0
      };
      
      const tronProviders = tronNRGProviders.status === 'fulfilled' 
        ? (Array.isArray(tronNRGProviders.value) ? tronNRGProviders.value : []) 
        : [];
      const tronPrice = tronNRGPrice.status === 'fulfilled' ? tronNRGPrice.value : null;
      
      const energyMarketData = energyTronMarketData.status === 'fulfilled' ? energyTronMarketData.value : {
        currentPrice: 0.0040,
        dailyVolume: 0,
        dailyChange: 0
      };
      
      const energyProviders = energyTronProviders.status === 'fulfilled' 
        ? (Array.isArray(energyTronProviders.value) ? energyTronProviders.value : [])
        : [];
      const providerComparison = comparison.status === 'fulfilled' ? comparison.value : null;

      // Í≥µÍ∏âÏûê Îç∞Ïù¥ÌÑ∞ ÌÜµÌï©
      const combined: CombinedProvider[] = [
        ...tronProviders.map((p: any) => ({
          ...p,
          provider: 'TronNRG' as const,
          priceChangeStatus: 'stable' as const
        })),
        ...energyProviders.map((p: any) => ({
          ...p,
          provider: 'EnergyTron' as const,
          priceChangeStatus: 'stable' as const
        }))
      ];

      // ÎßàÏºì ÏÑúÎ®∏Î¶¨ Í≥ÑÏÇ∞
      const allPrices = combined.filter(p => p.status === 'online').map(p => p.pricePerEnergy);
      const bestPrice = allPrices.length > 0 ? Math.min(...allPrices) : 0;
      const bestProvider = combined.find(p => p.pricePerEnergy === bestPrice)?.name || 'Unknown';
      
      const summary: MarketSummary = {
        bestPrice,
        bestProvider,
        totalProviders: combined.length,
        activeProviders: combined.filter(p => p.status === 'online').length,
        avgPrice: allPrices.length > 0 ? allPrices.reduce((a, b) => a + b, 0) / allPrices.length : 0,
        priceChange24h: ((tronMarketData as any)?.dailyChange || 0) + ((energyMarketData as any)?.dailyChange || 0) / 2,
        totalVolume: ((tronMarketData as any)?.dailyVolume || 0) + ((energyMarketData as any)?.dailyVolume || 0),
        lastUpdated: new Date().toISOString()
      };

      setCombinedProviders(combined);
      setMarketSummary(summary);
      setTronNRGPrice(tronPrice as any);
      setEnergyTronData(energyMarketData as any);
      setProviderComparison(providerComparison as any);
      setLastUpdate(new Date().toLocaleTimeString());
      setConnectionStatus('connected');
      
      console.log('‚úÖ External energy market data loaded successfully');
      
    } catch (error) {
      console.error('‚ùå Failed to load initial data:', error);
      setConnectionStatus('disconnected');
      
      // ÏóêÎü¨ Î∞úÏÉù ÏãúÏóêÎèÑ Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
      setCombinedProviders([]);
      setMarketSummary({
        bestPrice: 0,
        bestProvider: 'N/A',
        totalProviders: 0,
        activeProviders: 0,
        avgPrice: 0,
        priceChange24h: 0,
        totalVolume: 0,
        lastUpdated: new Date().toISOString()
      });
    } finally {
      setIsLoading(false);
    }
  };

  const loadAllProviders = async () => {
    try {
      const [tronNRGProviders, energyTronProviders] = await Promise.all([
        tronNRGService.getProviders(),
        energyTronService.getProviders()
      ]);
      
      const combined: CombinedProvider[] = [
        ...tronNRGProviders.map(p => ({
          ...p,
          provider: 'TronNRG' as const,
          priceChangeStatus: 'stable' as const
        })),
        ...energyTronProviders.map(p => ({
          ...p,
          provider: 'EnergyTron' as const,
          priceChangeStatus: 'stable' as const
        }))
      ];
      
      setCombinedProviders(combined);
      setLastUpdate(new Date().toLocaleTimeString());
    } catch (error) {
      console.error('‚ùå Failed to update providers:', error);
    }
  };

  const connectPriceStreams = () => {
    try {
      setConnectionStatus('connecting');
      
      console.log('üîå Connecting to price streams...');
      
      // TronNRG Í∞ÄÍ≤© Ïä§Ìä∏Î¶º (timeout ÏÑ§Ï†ï)
      setTimeout(() => {
        try {
          const tronWS = tronNRGService.connectPriceStream((price: TronNRGPrice) => {
            setTronNRGPrice(price);
            setLastUpdate(new Date().toLocaleTimeString());
          });
          
          if (tronWS) {
            tronWSRef.current = tronWS;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è TronNRG WebSocket connection failed:', error);
        }
      }, 500);
      
      // EnergyTron Í∞ÄÍ≤© Ïä§Ìä∏Î¶º (timeout ÏÑ§Ï†ï)
      setTimeout(() => {
        try {
          const energyTronWS = energyTronService.connectPriceStream((data: any) => {
            if (data.type === 'price_update') {
              setEnergyTronData(prev => prev ? {
                ...prev,
                currentPrice: data.data.price,
                timestamp: data.data.timestamp
              } : null);
              setLastUpdate(new Date().toLocaleTimeString());
            }
          });
          
          if (energyTronWS) {
            energyTronWSRef.current = energyTronWS;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è EnergyTron WebSocket connection failed:', error);
        }
      }, 1000);
      
      // Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º connectedÎ°ú ÏÑ§Ï†ï (WebSocket Ïã§Ìå®Ìï¥ÎèÑ ÌéòÏù¥ÏßÄÎäî ÎèôÏûë)
      setTimeout(() => {
        setConnectionStatus('connected');
        console.log('‚úÖ Price streams connection attempt completed');
      }, 1500);
      
    } catch (error) {
      console.error('‚ùå Failed to connect price streams:', error);
      setConnectionStatus('disconnected');
    }
  };

  const handleRefresh = async () => {
    await loadInitialData();
  };

  const handlePurchase = async (provider: CombinedProvider) => {
    try {
      // Íµ¨Îß§ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      window.location.href = `/energy/external-market/purchase?provider=${provider.id}&source=${provider.provider}`;
    } catch (error) {
      console.error('‚ùå Purchase navigation failed:', error);
      alert('Íµ¨Îß§ ÌéòÏù¥ÏßÄ Ïù¥Îèô Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'online': return 'text-green-400';
      case 'offline': return 'text-red-400';
      case 'maintenance': return 'text-yellow-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusBadge = (status: string) => {
    const colors = {
      online: 'bg-green-900 text-green-200',
      offline: 'bg-red-900 text-red-200',
      maintenance: 'bg-yellow-900 text-yellow-200'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-900 text-gray-200';
  };

  const getPriceChangeIcon = (status?: 'up' | 'down' | 'stable') => {
    switch (status) {
      case 'up': return <TrendingUp className="w-4 h-4 text-red-400" />;
      case 'down': return <TrendingDown className="w-4 h-4 text-green-400" />;
      default: return <div className="w-4 h-4 bg-gray-400 rounded-full" />;
    }
  };

  const getConnectionStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected': 
        return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'connecting': 
        return <div className="w-4 h-4 animate-spin rounded-full border-2 border-yellow-400 border-t-transparent" />;
      case 'disconnected': 
        return <AlertCircle className="w-4 h-4 text-red-400" />;
    }
  };

  // ÌïÑÌÑ∞ÎßÅ Î∞è Ï†ïÎ†¨ Î°úÏßÅ
  const filteredAndSortedProviders = combinedProviders
    .filter(provider => {
      if (filterStatus !== 'all' && provider.status !== filterStatus) return false;
      if (filterProvider !== 'all' && provider.provider !== filterProvider) return false;
      return true;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'price':
          return a.pricePerEnergy - b.pricePerEnergy;
        case 'reliability':
          return b.reliability - a.reliability;
        case 'response':
          return a.avgResponseTime - b.avgResponseTime;
        case 'available':
          return b.availableEnergy - a.availableEnergy;
        default:
          return 0;
      }
    });

  if (isLoading) {
    return (
      <BasePage title="Ïô∏Î∂Ä ÏóêÎÑàÏßÄ ÎßàÏºì" description="Ïô∏Î∂Ä ÏóêÎÑàÏßÄ Ï†úÍ≥µÏóÖÏ≤¥ÏôÄ ÏãúÏû• ÌòÑÌô©ÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§">
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      </BasePage>
    );
  }

  return (
    <BasePage title="Ïô∏Î∂Ä ÏóêÎÑàÏßÄ ÎßàÏºì" description="Ïô∏Î∂Ä ÏóêÎÑàÏßÄ Ï†úÍ≥µÏóÖÏ≤¥ÏôÄ ÏãúÏû• ÌòÑÌô©ÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§">
      <div className="space-y-6">
        {/* Ïó∞Í≤∞ ÏÉÅÌÉú Î∞è Ïã§ÏãúÍ∞Ñ Ï†ïÎ≥¥ */}
        <Section title="Ïó∞Í≤∞ ÏÉÅÌÉú">
          <div className="bg-gray-800 rounded-lg p-4 border border-gray-700 space-y-4">
            {/* TronNRG Ïó∞Í≤∞ ÏÉÅÌÉú */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                {getConnectionStatusIcon()}
                <span className="text-sm font-medium">
                  TronNRG API: {connectionStatus === 'connected' ? 'Ïó∞Í≤∞Îê®' : connectionStatus === 'connecting' ? 'Ïó∞Í≤∞ Ï§ë...' : 'Ïó∞Í≤∞ Ïã§Ìå®'}
                </span>
                {tronNRGPrice && (
                  <div className="flex items-center gap-2 text-sm">
                    <span className="text-gray-400">TronNRG Í∞ÄÍ≤©:</span>
                    <span className="font-mono text-green-400">${tronNRGPrice.price.toFixed(6)}</span>
                    <span className={`text-xs ${tronNRGPrice.change24h >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      ({tronNRGPrice.change24h >= 0 ? '+' : ''}{tronNRGPrice.change24h.toFixed(2)}%)
                    </span>
                  </div>
                )}
              </div>
              <div className="text-xs text-gray-500">
                ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {lastUpdate}
              </div>
            </div>

            {/* EnergyTron Ïó∞Í≤∞ ÏÉÅÌÉú */}
            <div className="flex items-center justify-between border-t border-gray-700 pt-3">
              <div className="flex items-center gap-3">
                {getConnectionStatusIcon()}
                <span className="text-sm font-medium">
                  EnergyTron API: {connectionStatus === 'connected' ? 'Ïó∞Í≤∞Îê®' : connectionStatus === 'connecting' ? 'Ïó∞Í≤∞ Ï§ë...' : 'Ïó∞Í≤∞ Ïã§Ìå®'}
                </span>
                {energyTronData && (
                  <div className="flex items-center gap-2 text-sm">
                    <span className="text-gray-400">EnergyTron Í∞ÄÍ≤©:</span>
                    <span className="font-mono text-purple-400">${energyTronData.currentPrice.toFixed(6)}</span>
                    <span className={`text-xs ${energyTronData.dailyChange >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      ({energyTronData.dailyChange >= 0 ? '+' : ''}{energyTronData.dailyChange.toFixed(2)}%)
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </Section>

        {/* ÏãúÏû• ÏöîÏïΩ */}
        {marketSummary && (
          <Section title="ÏãúÏû• ÏöîÏïΩ">
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              <StatCard
                title="ÏµúÏ†ÄÍ∞Ä"
                value={`$${marketSummary.bestPrice.toFixed(6)}`}
                trend="down"
              />
              <StatCard
                title="ÌôúÏÑ± Ï†úÍ≥µÏóÖÏ≤¥"
                value={`${marketSummary.activeProviders}/${marketSummary.totalProviders}`}
                trend="up"
              />
              <StatCard
                title="ÌèâÍ∑† Í∞ÄÍ≤©"
                value={`$${marketSummary.avgPrice.toFixed(6)}`}
                trend="neutral"
              />
              <StatCard
                title="24h Î≥ÄÎèô"
                value={`${marketSummary.priceChange24h.toFixed(2)}%`}
                trend={marketSummary.priceChange24h > 0 ? "up" : "down"}
              />
              <StatCard
                title="24h Í±∞ÎûòÎüâ"
                value={marketSummary.totalVolume.toLocaleString()}
                trend="up"
              />
            </div>
          </Section>
        )}

        {/* ÌïÑÌÑ∞ Î∞è Ï†ïÎ†¨ */}
        <Section title="ÌïÑÌÑ∞ Î∞è Ï†ïÎ†¨">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-gray-200 min-w-[80px]">Ï†ïÎ†¨ Í∏∞Ï§Ä:</label>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="price">Í∞ÄÍ≤©Ïàú</option>
                <option value="reliability">Ïã†Î¢∞ÎèÑÏàú</option>
                <option value="response">ÏùëÎãµÏÜçÎèÑÏàú</option>
                <option value="available">Í∞ÄÏö©ÎüâÏàú</option>
              </select>
            </div>
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-gray-200 min-w-[80px]">ÏÉÅÌÉú ÌïÑÌÑ∞:</label>
              <select
                value={filterProvider}
                onChange={(e) => setFilterProvider(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Ï†ÑÏ≤¥ Í≥µÍ∏âÏûê</option>
                <option value="TronNRG">TronNRG</option>
                <option value="EnergyTron">EnergyTron</option>
              </select>
            </div>
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-gray-200 min-w-[80px]">ÏÉÅÌÉú ÌïÑÌÑ∞:</label>
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Ï†ÑÏ≤¥</option>
                <option value="online">Ïò®ÎùºÏù∏</option>
                <option value="offline">Ïò§ÌîÑÎùºÏù∏</option>
                <option value="maintenance">Ï†êÍ≤ÄÏ§ë</option>
              </select>
            </div>
            <div className="flex items-end gap-2">
              <Button onClick={handleRefresh} disabled={isLoading}>
                <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                ÏÉàÎ°úÍ≥†Ïπ®
              </Button>
              <Button variant="secondary" onClick={connectPriceStreams}>
                Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞
              </Button>
            </div>
          </div>
        </Section>

        {/* Í≥µÍ∏âÏûê ÎπÑÍµê */}
        {providerComparison && (
          <Section title="Í≥µÍ∏âÏûê ÎπÑÍµê Î∂ÑÏÑù">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* ÏµúÏ†ÅÍ∞Ä Í≥µÍ∏âÏûê */}
                <div className="bg-green-900/20 rounded-lg p-4 border border-green-500/30">
                  <h4 className="text-lg font-semibold text-green-400 mb-2">üí∞ ÏµúÏ†ÄÍ∞Ä Í≥µÍ∏âÏûê</h4>
                  <p className="text-sm text-gray-300 mb-1">Í≥µÍ∏âÏûê: {providerComparison.bestPrice.provider}</p>
                  <p className="text-xl font-bold text-green-400">${providerComparison.bestPrice.price.toFixed(6)}</p>
                  <p className="text-sm text-green-300">Ï†àÏïΩ: ${providerComparison.bestPrice.savings.toFixed(6)}</p>
                </div>

                {/* ÏµúÍ≥† Ïã†Î¢∞ÎèÑ Í≥µÍ∏âÏûê */}
                <div className="bg-blue-900/20 rounded-lg p-4 border border-blue-500/30">
                  <h4 className="text-lg font-semibold text-blue-400 mb-2">üõ°Ô∏è ÏµúÍ≥† Ïã†Î¢∞ÎèÑ</h4>
                  <p className="text-sm text-gray-300 mb-1">Í≥µÍ∏âÏûê: {providerComparison.bestReliability.provider}</p>
                  <p className="text-xl font-bold text-blue-400">{providerComparison.bestReliability.reliability}%</p>
                  <p className="text-sm text-blue-300">Ïã†Î¢∞ÎèÑ ÏßÄÏàò</p>
                </div>

                {/* Ï∂îÏ≤ú Í≥µÍ∏âÏûê */}
                <div className="bg-purple-900/20 rounded-lg p-4 border border-purple-500/30">
                  <h4 className="text-lg font-semibold text-purple-400 mb-2">‚≠ê Ï∂îÏ≤ú Í≥µÍ∏âÏûê</h4>
                  <p className="text-sm text-gray-300 mb-1">Ï∂îÏ≤ú: {providerComparison.recommendation.suggested}</p>
                  <p className="text-sm text-purple-300 mb-1">{providerComparison.recommendation.reason}</p>
                  <p className="text-sm font-bold text-purple-400">{providerComparison.recommendation.savings}</p>
                </div>
              </div>

              {/* ÏÉÅÏÑ∏ ÎπÑÍµê ÌÖåÏù¥Î∏î */}
              <div className="mt-6">
                <h4 className="text-lg font-semibold text-white mb-4">ÏÉÅÏÑ∏ ÎπÑÍµê</h4>
                <div className="overflow-x-auto">
                  <table className="w-full text-sm">
                    <thead>
                      <tr className="border-b border-gray-700">
                        <th className="text-left py-2 text-gray-300">Í≥µÍ∏âÏûê</th>
                        <th className="text-right py-2 text-gray-300">ÌèâÍ∑† Í∞ÄÍ≤©</th>
                        <th className="text-right py-2 text-gray-300">Ïã†Î¢∞ÎèÑ</th>
                        <th className="text-right py-2 text-gray-300">ÏùëÎãµÏãúÍ∞Ñ</th>
                        <th className="text-right py-2 text-gray-300">Í∞ÄÏö©Îüâ</th>
                      </tr>
                    </thead>
                    <tbody>
                      {providerComparison.comparison.map((comp, index) => (
                        <tr key={index} className="border-b border-gray-800">
                          <td className="py-2 font-medium text-white">{comp.provider}</td>
                          <td className="py-2 text-right font-mono text-green-400">${comp.avgPrice.toFixed(6)}</td>
                          <td className="py-2 text-right text-blue-400">{comp.reliability}%</td>
                          <td className="py-2 text-right text-gray-300">{comp.responseTime}ms</td>
                          <td className="py-2 text-right text-gray-300">{comp.availableEnergy.toLocaleString()}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </Section>
        )}

        {/* ÌïÑÌÑ∞ Î∞è Ï†ïÎ†¨ */}
        <Section title="ÌïÑÌÑ∞ Î∞è Ï†ïÎ†¨">
          <div className="flex flex-wrap items-center gap-6">
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-gray-200 min-w-[60px]">Ï†ïÎ†¨:</label>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="price">Í∞ÄÍ≤©Ïàú</option>
                <option value="reliability">Ïã†Î¢∞ÎèÑÏàú</option>
                <option value="response">ÏùëÎãµÏÜçÎèÑÏàú</option>
                <option value="available">Í∞ÄÏö©ÎüâÏàú</option>
              </select>
            </div>
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-gray-200 min-w-[80px]">Í≥µÍ∏âÏûê:</label>
              <select
                value={filterProvider}
                onChange={(e) => setFilterProvider(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Ï†ÑÏ≤¥ Í≥µÍ∏âÏûê</option>
                <option value="TronNRG">TronNRG</option>
                <option value="EnergyTron">EnergyTron</option>
              </select>
            </div>
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-gray-200 min-w-[80px]">ÏÉÅÌÉú ÌïÑÌÑ∞:</label>
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Ï†ÑÏ≤¥</option>
                <option value="online">Ïò®ÎùºÏù∏</option>
                <option value="offline">Ïò§ÌîÑÎùºÏù∏</option>
                <option value="maintenance">Ï†êÍ≤ÄÏ§ë</option>
              </select>
            </div>
            <div className="flex items-end gap-2">
              <Button onClick={handleRefresh} disabled={isLoading}>
                <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                ÏÉàÎ°úÍ≥†Ïπ®
              </Button>
              <Button variant="secondary" onClick={connectPriceStreams}>
                Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞
              </Button>
            </div>
          </div>
        </Section>

        {/* ÏóêÎÑàÏßÄ Ï†úÍ≥µÏóÖÏ≤¥ Î™©Î°ù */}
        <Section title="ÏóêÎÑàÏßÄ Ï†úÍ≥µÏóÖÏ≤¥">
          <div className="grid gap-4">
            {filteredAndSortedProviders.map((provider) => (
              <div key={provider.id} className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <Zap className="w-6 h-6 text-blue-400" />
                    <h3 className="text-lg font-semibold">{provider.name}</h3>
                    <span className={`px-2 py-1 rounded-full text-xs ${getStatusBadge(provider.status)}`}>
                      {provider.status === 'online' ? 'Ïò®ÎùºÏù∏' : provider.status === 'maintenance' ? 'Ï†êÍ≤ÄÏ§ë' : 'Ïò§ÌîÑÎùºÏù∏'}
                    </span>
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      provider.provider === 'TronNRG' 
                        ? 'bg-blue-900 text-blue-200' 
                        : 'bg-purple-900 text-purple-200'
                    }`}>
                      {provider.provider}
                    </span>
                  </div>
                  <div className="flex gap-2">
                    <Button 
                      onClick={() => handlePurchase(provider)}
                      disabled={provider.status !== 'online'}
                    >
                      Íµ¨Îß§ÌïòÍ∏∞
                    </Button>
                    <Button variant="secondary">
                      ÏÉÅÏÑ∏Ï†ïÎ≥¥
                    </Button>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
                  <div>
                    <p className="text-sm text-gray-400">Îã®Í∞Ä</p>
                    <div className="flex items-center gap-2">
                      <p className="text-lg font-bold text-green-400">${provider.pricePerEnergy.toFixed(6)}</p>
                      {getPriceChangeIcon(provider.priceChangeStatus)}
                    </div>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">Í∞ÄÏö©Îüâ</p>
                    <p className="font-medium">{provider.availableEnergy.toLocaleString()}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">Ïã†Î¢∞ÎèÑ</p>
                    <p className="font-medium">{provider.reliability}%</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">ÏùëÎãµ ÏãúÍ∞Ñ</p>
                    <p className="font-medium">{provider.avgResponseTime}Ï¥à</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">ÏµúÏÜå Ï£ºÎ¨∏</p>
                    <p className="text-sm">{provider.minOrderSize.toLocaleString()}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">ÏàòÏàòÎ£å</p>
                    <p className="text-sm">{(provider.fees.tradingFee * 100).toFixed(3)}%</p>
                  </div>
                </div>

                <div className="mt-4 pt-4 border-t border-gray-700">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4 text-sm">
                      <span className={`flex items-center gap-1 ${getStatusColor(provider.status)}`}>
                        <div className={`w-2 h-2 rounded-full ${provider.status === 'online' ? 'bg-green-400' : provider.status === 'maintenance' ? 'bg-yellow-400' : 'bg-red-400'}`}></div>
                        {provider.status === 'online' ? 'ÏÑúÎπÑÏä§ Ï§ë' : provider.status === 'maintenance' ? 'Ï†êÍ≤Ä Ï§ë' : 'ÏÑúÎπÑÏä§ Ï§ëÎã®'}
                      </span>
                      <span className="text-gray-400">
                        Ïã†Î¢∞ÎèÑ: {provider.reliability}%
                      </span>
                      <span className="text-gray-400">
                        ÏµúÎåÄ Ï£ºÎ¨∏: {provider.maxOrderSize.toLocaleString()}
                      </span>
                    </div>
                    <div className="text-xs text-gray-500">
                      ÏóÖÎç∞Ïù¥Ìä∏: {new Date(provider.lastUpdated).toLocaleString()}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </Section>

        {/* ÏãúÏû• ÎèôÌñ• Î∞è Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ */}
        <Section title="ÏãúÏû• ÎèôÌñ•">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="font-medium mb-4 flex items-center gap-2">
                <TrendingDown className="w-5 h-5 text-green-400" />
                Í∞ÄÍ≤© ÎèôÌñ•
              </h4>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">ÌòÑÏû¨ ÏµúÏ†ÄÍ∞Ä</span>
                  <span className="text-green-400">${marketSummary?.bestPrice.toFixed(6)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">24ÏãúÍ∞Ñ ÌèâÍ∑†</span>
                  <span>${marketSummary?.avgPrice.toFixed(6)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Î≥ÄÎèôÎ•†</span>
                  <span className={marketSummary && marketSummary.priceChange24h >= 0 ? 'text-green-400' : 'text-red-400'}>
                    {marketSummary?.priceChange24h.toFixed(2)}%
                  </span>
                </div>
              </div>
            </div>
            
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="font-medium mb-4 flex items-center gap-2">
                <Zap className="w-5 h-5 text-blue-400" />
                Í≥µÍ∏âÏûê ÌòÑÌô©
              </h4>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">Ï¥ù Í≥µÍ∏âÏûê</span>
                  <span>{marketSummary?.totalProviders}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">ÌôúÏÑ± Í≥µÍ∏âÏûê</span>
                  <span className="text-green-400">{marketSummary?.activeProviders}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">TronNRG Ïó∞Í≤∞</span>
                  <span className="flex items-center gap-1">
                    {getConnectionStatusIcon()}
                    <span className="text-xs">
                      {connectionStatus === 'connected' ? 'Ïã§ÏãúÍ∞Ñ' : 'Ïò§ÌîÑÎùºÏù∏'}
                    </span>
                  </span>
                </div>
              </div>
            </div>
          </div>

          {tronNRGPrice && (
            <div className="mt-6 bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="font-medium mb-4 flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-yellow-400" />
                Ïã§ÏãúÍ∞Ñ TronNRG Îç∞Ïù¥ÌÑ∞
              </h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div>
                  <p className="text-sm text-gray-400">ÌòÑÏû¨Í∞Ä</p>
                  <p className="text-xl font-bold text-green-400">${tronNRGPrice.price.toFixed(6)}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">24h Î≥ÄÎèô</p>
                  <p className={`text-lg font-semibold ${tronNRGPrice.change24h >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                    {tronNRGPrice.change24h >= 0 ? '+' : ''}{tronNRGPrice.change24h.toFixed(2)}%
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">24h Í±∞ÎûòÎüâ</p>
                  <p className="text-lg font-semibold">{tronNRGPrice.volume24h.toLocaleString()}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">ÌÜµÌôî</p>
                  <p className="text-lg font-semibold text-yellow-400">{tronNRGPrice.currency}</p>
                </div>
              </div>
            </div>
          )}
        </Section>
      </div>
    </BasePage>
  );
}
